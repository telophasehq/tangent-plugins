// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package mapper represents the exported interface "tangent:logs/mapper@0.1.0".
package mapper

import (
	"go.bytecodealliance.org/cm"
	"qradar_offense/internal/tangent/logs/log"
)

// Logview represents the exported type alias "tangent:logs/mapper@0.1.0#logview".
//
// See [log.Logview] for more information.
type Logview = log.Logview

// Scalar represents the type alias "tangent:logs/mapper@0.1.0#scalar".
//
// See [log.Scalar] for more information.
type Scalar = log.Scalar

// Meta represents the record "tangent:logs/mapper@0.1.0#meta".
//
//	record meta {
//		name: string,
//		version: string,
//	}
type Meta struct {
	_       cm.HostLayout `json:"-"`
	Name    string        `json:"name"`
	Version string        `json:"version"`
}

// Pred represents the variant "tangent:logs/mapper@0.1.0#pred".
//
//	variant pred {
//		has(string),
//		eq(tuple<string, scalar>),
//		prefix(tuple<string, string>),
//		in(tuple<string, list<scalar>>),
//		gt(tuple<string, f64>),
//		regex(tuple<string, string>),
//	}
type Pred cm.Variant[uint8, TupleStringScalarShape, cm.Tuple[string, Scalar]]

// PredHas returns a [Pred] of case "has".
func PredHas(data string) Pred {
	return cm.New[Pred](0, data)
}

// Has returns a non-nil *[string] if [Pred] represents the variant case "has".
func (self *Pred) Has() *string {
	return cm.Case[string](self, 0)
}

// PredEq returns a [Pred] of case "eq".
func PredEq(data cm.Tuple[string, Scalar]) Pred {
	return cm.New[Pred](1, data)
}

// Eq returns a non-nil *[cm.Tuple[string, Scalar]] if [Pred] represents the variant case "eq".
func (self *Pred) Eq() *cm.Tuple[string, Scalar] {
	return cm.Case[cm.Tuple[string, Scalar]](self, 1)
}

// PredPrefix returns a [Pred] of case "prefix".
func PredPrefix(data [2]string) Pred {
	return cm.New[Pred](2, data)
}

// Prefix returns a non-nil *[[2]string] if [Pred] represents the variant case "prefix".
func (self *Pred) Prefix() *[2]string {
	return cm.Case[[2]string](self, 2)
}

// PredIn returns a [Pred] of case "in".
func PredIn(data cm.Tuple[string, cm.List[Scalar]]) Pred {
	return cm.New[Pred](3, data)
}

// In returns a non-nil *[cm.Tuple[string, cm.List[Scalar]]] if [Pred] represents the variant case "in".
func (self *Pred) In() *cm.Tuple[string, cm.List[Scalar]] {
	return cm.Case[cm.Tuple[string, cm.List[Scalar]]](self, 3)
}

// PredGt returns a [Pred] of case "gt".
func PredGt(data cm.Tuple[string, float64]) Pred {
	return cm.New[Pred](4, data)
}

// Gt returns a non-nil *[cm.Tuple[string, float64]] if [Pred] represents the variant case "gt".
func (self *Pred) Gt() *cm.Tuple[string, float64] {
	return cm.Case[cm.Tuple[string, float64]](self, 4)
}

// PredRegex returns a [Pred] of case "regex".
func PredRegex(data [2]string) Pred {
	return cm.New[Pred](5, data)
}

// Regex returns a non-nil *[[2]string] if [Pred] represents the variant case "regex".
func (self *Pred) Regex() *[2]string {
	return cm.Case[[2]string](self, 5)
}

var _PredStrings = [6]string{
	"has",
	"eq",
	"prefix",
	"in",
	"gt",
	"regex",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Pred) String() string {
	return _PredStrings[v.Tag()]
}

// Selector represents the record "tangent:logs/mapper@0.1.0#selector".
//
//	record selector {
//		any: list<pred>,
//		all: list<pred>,
//		none: list<pred>,
//	}
type Selector struct {
	_   cm.HostLayout `json:"-"`
	Any cm.List[Pred] `json:"any"`

	// OR of predicates
	All cm.List[Pred] `json:"all"`

	// AND of predicates
	None cm.List[Pred] `json:"none"`
}
