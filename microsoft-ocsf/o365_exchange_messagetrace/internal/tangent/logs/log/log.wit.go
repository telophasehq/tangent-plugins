// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package log represents the imported interface "tangent:logs/log@0.1.0".
package log

import (
	"go.bytecodealliance.org/cm"
)

// Scalar represents the variant "tangent:logs/log@0.1.0#scalar".
//
//	variant scalar {
//		str(string),
//		int(s64),
//		float(f64),
//		boolean(bool),
//		bytes(list<u8>),
//	}
type Scalar cm.Variant[uint8, string, int64]

// ScalarStr returns a [Scalar] of case "str".
func ScalarStr(data string) Scalar {
	return cm.New[Scalar](0, data)
}

// Str returns a non-nil *[string] if [Scalar] represents the variant case "str".
func (self *Scalar) Str() *string {
	return cm.Case[string](self, 0)
}

// ScalarInt returns a [Scalar] of case "int".
func ScalarInt(data int64) Scalar {
	return cm.New[Scalar](1, data)
}

// Int returns a non-nil *[int64] if [Scalar] represents the variant case "int".
func (self *Scalar) Int() *int64 {
	return cm.Case[int64](self, 1)
}

// ScalarFloat returns a [Scalar] of case "float".
func ScalarFloat(data float64) Scalar {
	return cm.New[Scalar](2, data)
}

// Float returns a non-nil *[float64] if [Scalar] represents the variant case "float".
func (self *Scalar) Float() *float64 {
	return cm.Case[float64](self, 2)
}

// ScalarBoolean returns a [Scalar] of case "boolean".
func ScalarBoolean(data bool) Scalar {
	return cm.New[Scalar](3, data)
}

// Boolean returns a non-nil *[bool] if [Scalar] represents the variant case "boolean".
func (self *Scalar) Boolean() *bool {
	return cm.Case[bool](self, 3)
}

// ScalarBytes returns a [Scalar] of case "bytes".
func ScalarBytes(data cm.List[uint8]) Scalar {
	return cm.New[Scalar](4, data)
}

// Bytes returns a non-nil *[cm.List[uint8]] if [Scalar] represents the variant case "bytes".
func (self *Scalar) Bytes() *cm.List[uint8] {
	return cm.Case[cm.List[uint8]](self, 4)
}

var _ScalarStrings = [5]string{
	"str",
	"int",
	"float",
	"boolean",
	"bytes",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Scalar) String() string {
	return _ScalarStrings[v.Tag()]
}

// Logview represents the imported resource "tangent:logs/log@0.1.0#logview".
//
//	resource logview
type Logview cm.Resource

// ResourceDrop represents the imported resource-drop for resource "logview".
//
// Drops a resource handle.
//
//go:nosplit
func (self Logview) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_LogviewResourceDrop((uint32)(self0))
	return
}

// Get represents the imported method "get".
//
//	get: func(path: string) -> option<scalar>
//
//go:nosplit
func (self Logview) Get(path string) (result cm.Option[Scalar]) {
	self0 := cm.Reinterpret[uint32](self)
	path0, path1 := cm.LowerString(path)
	wasmimport_LogviewGet((uint32)(self0), (*uint8)(path0), (uint32)(path1), &result)
	return
}

// GetList represents the imported method "get-list".
//
//	get-list: func(path: string) -> option<list<scalar>>
//
//go:nosplit
func (self Logview) GetList(path string) (result cm.Option[cm.List[Scalar]]) {
	self0 := cm.Reinterpret[uint32](self)
	path0, path1 := cm.LowerString(path)
	wasmimport_LogviewGetList((uint32)(self0), (*uint8)(path0), (uint32)(path1), &result)
	return
}

// GetMap represents the imported method "get-map".
//
//	get-map: func(path: string) -> option<list<tuple<string, scalar>>>
//
//go:nosplit
func (self Logview) GetMap(path string) (result cm.Option[cm.List[cm.Tuple[string, Scalar]]]) {
	self0 := cm.Reinterpret[uint32](self)
	path0, path1 := cm.LowerString(path)
	wasmimport_LogviewGetMap((uint32)(self0), (*uint8)(path0), (uint32)(path1), &result)
	return
}

// Has represents the imported method "has".
//
// JSONPath/dot-path style, e.g. "detail.findings[0].CompanyName"
//
//	has: func(path: string) -> bool
//
//go:nosplit
func (self Logview) Has(path string) (result bool) {
	self0 := cm.Reinterpret[uint32](self)
	path0, path1 := cm.LowerString(path)
	result0 := wasmimport_LogviewHas((uint32)(self0), (*uint8)(path0), (uint32)(path1))
	result = (bool)(cm.U32ToBool((uint32)(result0)))
	return
}

// Keys represents the imported method "keys".
//
//	keys: func(path: string) -> list<string>
//
//go:nosplit
func (self Logview) Keys(path string) (result cm.List[string]) {
	self0 := cm.Reinterpret[uint32](self)
	path0, path1 := cm.LowerString(path)
	wasmimport_LogviewKeys((uint32)(self0), (*uint8)(path0), (uint32)(path1), &result)
	return
}

// Len represents the imported method "len".
//
//	len: func(path: string) -> option<u32>
//
//go:nosplit
func (self Logview) Len(path string) (result cm.Option[uint32]) {
	self0 := cm.Reinterpret[uint32](self)
	path0, path1 := cm.LowerString(path)
	wasmimport_LogviewLen((uint32)(self0), (*uint8)(path0), (uint32)(path1), &result)
	return
}
